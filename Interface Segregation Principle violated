interface UserOperations {
    void browseBooks();
    void placeOrder();
    void manageUsers();
}

// Guest forced to implement unnecessary methods
class GuestUser implements UserOperations {
    public void browseBooks() {
        System.out.println("Guest is browsing books.");
    }

    public void placeOrder() {
        throw new UnsupportedOperationException("Guest cannot place orders.");
    }

    public void manageUsers() {
        throw new UnsupportedOperationException("Guest cannot manage users.");
    }
}

// Customer forced to implement manageUsers()
class CustomerUser implements UserOperations {
    public void browseBooks() {
        System.out.println("Customer is browsing books.");
    }

    public void placeOrder() {
        System.out.println("Customer placed an order.");
    }

    public void manageUsers() {
        throw new UnsupportedOperationException("Customer cannot manage users.");
    }
}

public class ISPViolationExample {
    public static void main(String[] args) {
        GuestUser guest = new GuestUser();
        guest.browseBooks();
        try {
            guest.placeOrder(); // Will throw an exception
        } catch (UnsupportedOperationException e) {
            System.out.println(e.getMessage());
        }

        CustomerUser customer = new CustomerUser();
        customer.browseBooks();
        customer.placeOrder();
        try {
            customer.manageUsers(); // Will throw an exception
        } catch (UnsupportedOperationException e) {
            System.out.println(e.getMessage());
        }
    }
}
